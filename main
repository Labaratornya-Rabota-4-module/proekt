#include <iostream>
#include <filesystem>
#include "JobMaker.h"
#include <chrono>

const std::filesystem::path SOURCE_FOLDER_PATH = "source"; // Путь к папке из которой программа будет брать файлы с заданием
const std::filesystem::path DESTINATION_FOLDER_PATH = "destination"; // Путь к папке в которую программа будет записывать решение
const size_t THREADS_NUMBER = 1; // Количество потоков на которых будут выполняться задачи
// *Если путь указан без С:// то путь будет считаться относительно места запуска программы

// Проверка данных на корректность
bool isGoodData()
{
	return (std::filesystem::is_directory(SOURCE_FOLDER_PATH) && // Путь к папке откуда беруться задания верный
		std::filesystem::is_directory(DESTINATION_FOLDER_PATH) && // Путь к папке куда помещаются решения верный
		THREADS_NUMBER > 0 && // Количество потоков больше 0
		SOURCE_FOLDER_PATH != DESTINATION_FOLDER_PATH); // Папка откуда берутся задания не совпадает с папкой куда помещаются решнные задания
}
int main()
{
	std::chrono::time_point start = std::chrono::high_resolution_clock::now(); // Засекаем время начала
	if (isGoodData()) // Если данные корректны
	{
		JobKeeper job_keeper(SOURCE_FOLDER_PATH, DESTINATION_FOLDER_PATH); // Создаем объект который генерирует задачи
		JobMaker job_maker(THREADS_NUMBER); // Создаем исполнителя
		job_maker.makeJobs(&job_keeper); // Выполняем задачи
	}
	std::chrono::time_point end = std::chrono::high_resolution_clock::now(); // Зесекаем время конца
	std::chrono::milliseconds time = std::chrono::duration_cast<std::chrono::milliseconds>(end - start); // Вычисляем длительность

	std::cout << "Programm duration: " << time.count() << " milliseconds" << std::endl; // Выводим время
	system("pause");
}
